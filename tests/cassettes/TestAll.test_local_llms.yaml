interactions:
- request:
    body: '{"model": "deepseek-v2:16b", "prompt": "### System:\nYou will be assigned
      tasks involving the extraction, analysis, and interpretation of data within
      various types of documents. Your role is to carefully process the information
      and provide accurate, relevant outputs based on the specific instructions provided.\n\nKEY
      TERMINOLOGY TO UNDERSTAND:\n\n1. Document: A structured or unstructured file
      containing written or visual content. Documents can vary in type and purpose,
      including but not limited to:\n- Contracts: Legal agreements defining terms
      and obligations.\n- Invoices: Financial documents detailing transactions and
      payments.\n- Curricula Vitae (CVs): Resumes outlining an individual''s professional
      experience and qualifications.\n- General Documents: Any other types of files
      that may contain text, tables, images, or mixed formats.\nNote that occasionally
      you may be working with document fragments rather than complete documents. These
      fragments represent portions of a larger document and should be analyzed within
      their limited context. When working with fragments, focus on extracting information
      from the available content without making assumptions about missing parts.\n\n2.
      Aspect: A defined area or topic within a document that requires focused attention.
      Each aspect corresponds to a specific subject or theme described in the task.
      For example:\n- Contract Aspects: Payment terms, parties involved, or termination
      clauses.\n- Invoice Aspects: Due dates, line-item breakdowns, or tax details.\n-
      CV Aspects: Work experience, education, or skills.\nYou will analyze aspects
      as instructed, considering their relevance and context within the document.\n\n3.
      Concept: A unit of information or an entity relevant to the task. Concepts may
      be derived from an aspect or the broader document context. They represent a
      wide range of data points and insights, from simple entities (names, dates,
      monetary values) to complex evaluations, conclusions, and answers to specific
      questions. Concepts can be:\n- Factual extractions: Such as a penalty clause
      in a contract, a total amount due in an invoice, or a certification in a CV.\n-
      Analytical insights: Such as risk assessments, compliance evaluations, or pattern
      identifications.\n- Reasoned conclusions: Such as determining whether a document
      meets specific criteria or answers particular questions.\n- Interpretative judgments:
      Such as ratings, classifications, or qualitative assessments based on document
      content.\n\nGUIDELINES FOR YOUR WORK:\n- Understand the context: Before processing
      the document, ensure you comprehend the nature of the document and the aspects
      or concepts you need to focus on.\n- Follow specific instructions: Each task
      will include detailed instructions, such as which aspects or concepts to focus
      on and how the data should be presented.\n- Maintain accuracy: Provide precise
      extractions and analysis, ensuring your outputs align with the document''s intent
      and context.\n- Adapt to variability: Documents may differ in structure, language,
      or formatting. Be flexible and apply reasoning to handle variations effectively.\n\nEXPECTED
      DELIVERABLES:\n- Structured outputs: Clearly formatted and well-organized results
      based on the task requirements.\n- Explanations (when required): When required
      by the instructions, include justifications or reasoning for your interpretations.\n-
      Insights (when required): When required by the instructions, highlight trends,
      patterns, or noteworthy findings that could add value to the task.\n- References
      (when required): When required by the instructions, output references based
      on which you extracted data, provided insights, or made conclusions during the
      task.\n\n\nBy adhering to this framework, you will ensure consistent and high-quality
      performance across diverse document analysis tasks.\n\n### User:\nBelow you
      will find document text and a list of concepts.\n\nYour task is to:\n1. Read
      through the document text provided.\n2. Identify whether each concept in the
      concepts list is addressed within the document text.\n3. For each concept that
      appears, extract zero or more items relevant to that concept. The item format
      and structure are specified for each concept.\n4. Produce a JSON array containing
      your extracted data, in the provided format.\n\nIf a concept is not addressed
      in the document text, you must still include an entry in the final JSON output
      but with an empty \"extracted_items\" list.\n\nFollow these additional rules:\n\n-
      Output format:\nProvide your answer in only the following answer format (do
      not include backticks, code fences, or any introductory/explanatory text).\n\n-
      Consistency:\n    -- Each JSON object in the list must have two keys: \"concept_id\"
      and \"extracted_items\".\n    -- The value of \"concept_id\" must match exactly
      the ID of the concept (for example, \"C0\", \"C1\", etc.).\n    -- The value
      of \"extracted_items\" must be an array. If the concept is not found or there
      are no items to extract, leave the array empty ([]).\n        --- Guidance regarding
      the possible amount of extracted items for the concept is specified under \"Amount
      of extracted items\". Each extracted item, even if there is only one, must be
      part of the \"extracted_items\" array.\n\n- Item structure:\n    -- If a specific
      structure is provided for a concept under \"Expected structure,\" you must follow
      that structure for all extracted items corresponding to that concept.\n    --
      If a rating scale is provided for a concept under \"Rating scale,\" the extracted
      item value must be within that scale.\n    -- If available labels are provided
      for a concept under \"Available labels,\" the extracted item value must be a
      list containing only labels from the predefined set. If none of the predefined
      labels apply, do not extract any items for that concept.\n    -- If there are
      example items (\"Extracted concept examples\"), try to follow the same style
      and formatting for your extracted items.\n    -- When extracting string values,
      translate them in English if the original language of the document is not English.\n\n-
      Types of extracted items:\n    -- Each concept specifies an \"extracted item
      type\" (found under \"Concept extracted item type\"). Ensure your extracted
      items strictly match that type. Python types are provided (e.g., str for string,
      int for integer, float for floating-point number, dict for object, etc.).\n    --
      Do not introduce any extra fields or modify the specified structure.\n\n- Handling
      missing or multiple items:\n    -- If a concept is not mentioned at all, your
      output should still contain an entry for that concept with an empty \"extracted_items\"
      array.\n    -- For concepts that have an \"Available labels:\" section: if none
      of the predefined labels apply to the content, leave the \"extracted_items\"
      array empty.\n    -- For concepts that have an \"Available labels:\" section:
      if multiple labels apply to the same instance or context, include them all in
      a single extracted item with multiple labels in the \"labels\" array (e.g.,
      {\"labels\": [\"label1\", \"label2\"]}). Only create multiple extracted items
      if there are genuinely distinct instances or contexts that warrant separate
      classification.\n    -- For concepts that do not have an \"Available labels:\"
      section: if multiple items are found for a concept, include each as a separate
      entry within the \"extracted_items\" array.\n\n- No additional text:\n    --
      Do not include any headers, explanations, or text outside of the JSON array.\n    --
      Do not wrap your JSON response in backticks or any other formatting characters.\n\n======\nANSWER
      FORMAT (MANDATORY):\n[\n    {\n        \"concept_id\": str,\n        \"extracted_items:
      [\n            ...\n        ],\n    },\n    ...\n]\n======\n\n______\nCONCEPTS:\n````\n-
      Concept ID: C0\nConcept name: Contract title\n\nConcept description:\nThe title
      of the contract.\n\nAmount of extracted items: This concept may have zero, one,
      or multiple extracted items.\n\nConcept extracted item type: str\n````\n\n______\n\n------\nDOCUMENT
      TEXT:\nThe title of this contract is Non-Disclosure Agreement.\n------\n\n\n",
      "options": {"temperature": 0.3, "top_p": 0.3, "num_predict": 4096, "seed": 123},
      "stream": false, "images": []}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '8241'
      host:
      - DUMMY
      user-agent:
      - litellm/1.71.1
    method: POST
    uri: http://localhost:11434/api/generate
  response:
    body:
      string: '{"model": "deepseek-v2:16b", "created_at": "2025-06-17T15:24:19.471473Z",
        "response": " [\n    {\n        \"concept_id\": \"C0\",\n        \"extracted_items\":
        [\"Non-Disclosure Agreement\"]\n    }\n]", "done": true, "done_reason": "stop",
        "context": [5726, 25, 49757, 3652, 25, 185, 2054, 543, 330, 12811, 9224, 15231,
        254, 26992, 11, 4751, 11, 285, 15818, 280, 1191, 2383, 3947, 5009, 280, 9185,
        13, 4518, 5012, 317, 276, 10654, 1699, 254, 1757, 285, 2774, 10356, 11, 7683,
        14804, 2853, 331, 254, 3052, 9454, 4286, 13, 185, 185, 14107, 53600, 19212,
        46, 72000, 8519, 77957, 1434, 7555, 25, 185, 185, 16, 13, 16385, 25, 338,
        26932, 410, 99864, 1761, 8891, 4473, 410, 7959, 3093, 13, 43057, 481, 8992,
        279, 1449, 285, 5487, 11, 2847, 548, 441, 6415, 276, 25, 185, 12, 96854, 25,
        29243, 28240, 21099, 3769, 285, 28505, 13, 185, 12, 685, 64201, 25, 19098,
        9185, 48792, 14598, 285, 15947, 13, 185, 12, 12246, 59749, 632, 51853, 334,
        25457, 82, 1780, 2741, 9912, 83869, 274, 3451, 6, 82, 5166, 2784, 285, 38019,
        13, 185, 12, 5780, 43057, 25, 6295, 750, 5009, 280, 3194, 344, 975, 3780,
        2432, 11, 7208, 11, 5282, 11, 410, 10655, 19804, 13, 185, 6017, 344, 17235,
        340, 975, 330, 2695, 366, 3412, 23536, 3272, 853, 3938, 9185, 13, 3410, 23536,
        2564, 25518, 280, 245, 5579, 3412, 285, 1023, 330, 24172, 2383, 704, 6415,
        3733, 13, 2473, 2695, 366, 23536, 11, 3810, 331, 46277, 1757, 473, 254, 2324,
        3093, 1673, 2883, 17325, 786, 7085, 4373, 13, 185, 185, 17, 13, 77114, 25,
        338, 4218, 3046, 410, 9292, 2383, 245, 3412, 344, 6235, 11554, 5379, 13, 7915,
        6729, 12777, 276, 245, 3052, 3605, 410, 9665, 5734, 279, 254, 5266, 13, 1494,
        2203, 25, 185, 12, 23899, 77114, 82, 25, 36349, 3769, 11, 9693, 6591, 11,
        410, 30399, 28448, 13, 185, 12, 89732, 77114, 82, 25, 20729, 13533, 11, 1353,
        12, 2013, 30087, 82, 11, 410, 4712, 4295, 13, 185, 12, 22893, 77114, 82, 25,
        8178, 2784, 11, 6090, 11, 410, 6922, 13, 185, 2054, 543, 17804, 11867, 372,
        37462, 11, 9605, 704, 34593, 285, 3733, 2383, 254, 3412, 13, 185, 185, 18,
        13, 40834, 25, 338, 5606, 280, 1757, 410, 274, 12990, 7683, 276, 254, 5266,
        13, 83140, 975, 330, 10341, 473, 274, 6729, 410, 254, 27430, 3412, 3733, 13,
        1955, 2564, 245, 5505, 3169, 280, 1191, 3487, 285, 21625, 11, 473, 2976, 21668,
        334, 5686, 11, 13533, 11, 35146, 3039, 8, 276, 4301, 41190, 11, 23026, 11,
        285, 9789, 276, 3052, 4313, 13, 83140, 481, 330, 25, 185, 12, 417, 10512,
        4155, 1484, 25, 10553, 372, 245, 20103, 12341, 279, 245, 5461, 11, 245, 3223,
        3744, 3266, 279, 274, 37376, 11, 410, 245, 23204, 279, 245, 22893, 13, 185,
        12, 24508, 9270, 21625, 25, 10553, 372, 5441, 38279, 11, 16366, 41190, 11,
        410, 7937, 2740, 8445, 13, 185, 12, 37409, 271, 23026, 25, 10553, 372, 21457,
        3203, 245, 3412, 18880, 3052, 15075, 410, 9789, 2590, 4313, 13, 185, 12, 68956,
        1251, 48834, 25, 10553, 372, 22752, 11, 83267, 11, 410, 35830, 38279, 2853,
        331, 3412, 3093, 13, 185, 185, 61726, 6379, 1156, 2729, 12208, 29004, 51510,
        25, 185, 12, 70238, 254, 3733, 25, 12337, 8426, 254, 3412, 11, 5462, 340,
        29651, 254, 4910, 280, 254, 3412, 285, 254, 11867, 410, 16982, 340, 933, 276,
        3810, 331, 13, 185, 12, 23028, 3052, 9454, 25, 7915, 5266, 543, 3433, 9333,
        9454, 11, 1108, 372, 588, 11867, 410, 16982, 276, 3810, 331, 285, 946, 254,
        1191, 1023, 330, 6605, 13, 185, 12, 87525, 9747, 25, 49964, 13197, 4155, 1484,
        285, 4751, 11, 19888, 520, 14804, 8980, 366, 254, 3412, 6, 82, 6699, 285,
        3733, 13, 185, 12, 42289, 276, 32946, 25, 43057, 975, 17467, 279, 4327, 11,
        4706, 11, 410, 33900, 13, 2746, 15650, 285, 4359, 22834, 276, 6428, 17073,
        11756, 13, 185, 185, 78728, 45006, 41550, 5737, 50, 25, 185, 12, 22416, 3176,
        14804, 25, 35018, 30971, 285, 1136, 12, 52691, 2472, 2853, 331, 254, 5266,
        7266, 13, 185, 12, 2078, 11713, 720, 334, 7334, 3430, 1780, 2473, 3430, 457,
        254, 9454, 11, 3433, 953, 8445, 410, 22834, 327, 520, 48349, 13, 185, 12,
        80159, 334, 7334, 3430, 1780, 2473, 3430, 457, 254, 9454, 11, 9111, 17223,
        11, 11817, 11, 410, 56130, 18107, 344, 1027, 962, 1437, 276, 254, 5266, 13,
        185, 12, 71064, 334, 7334, 3430, 1780, 2473, 3430, 457, 254, 9454, 11, 2827,
        13531, 2853, 331, 588, 340, 19515, 1191, 11, 4286, 21625, 11, 410, 1401, 23026,
        2320, 254, 5266, 13, 185, 185, 185, 2716, 87119, 276, 437, 9817, 11, 340,
        543, 5462, 9377, 285, 1461, 12, 15474, 3791, 3246, 16253, 3412, 4751, 9224,
        13, 185, 185, 13483, 10468, 25, 185, 27427, 340, 543, 1275, 3412, 2432, 285,
        245, 1525, 280, 16982, 13, 185, 185, 7616, 5266, 317, 276, 25, 185, 16, 13,
        6470, 1184, 254, 3412, 2432, 4286, 13, 185, 17, 13, 67870, 3203, 1319, 6405,
        279, 254, 16982, 1525, 317, 14811, 2383, 254, 3412, 2432, 13, 185, 18, 13,
        1494, 1319, 6405, 344, 6266, 11, 7804, 5858, 410, 691, 5023, 7683, 276, 344,
        6405, 13, 429, 2861, 4807, 285, 4327, 418, 7116, 327, 1319, 6405, 13, 185,
        19, 13, 17573, 347, 245, 11573, 3869, 8891, 520, 19515, 1191, 11, 279, 254,
        4286, 4807, 13, 185, 185, 1847, 245, 6405, 317, 441, 14811, 279, 254, 3412,
        2432, 11, 340, 1534, 1592, 3433, 274, 6054, 279, 254, 2328, 11573, 2827, 548,
        366, 274, 7137, 440, 1738, 20639, 62, 14118, 1, 1525, 13, 185, 185, 25807,
        1069, 4585, 6543, 25, 185, 185, 12, 20154, 4807, 25, 185, 70863, 520, 3510,
        279, 889, 254, 1893, 3510, 4807, 334, 2860, 441, 3433, 1062, 86445, 11, 2985,
        56302, 11, 410, 688, 51859, 14, 96800, 5775, 2432, 633, 185, 185, 12, 70369,
        1918, 25, 185, 300, 1593, 7915, 11573, 2159, 279, 254, 1525, 1534, 463, 984,
        8726, 25, 440, 43109, 62, 305, 1, 285, 440, 1738, 20639, 62, 14118, 2859,
        185, 300, 1593, 429, 1437, 280, 440, 43109, 62, 305, 1, 1534, 4174, 5096,
        254, 4993, 280, 254, 6405, 334, 1467, 2203, 11, 440, 34, 15, 955, 440, 34,
        16, 955, 3387, 13655, 185, 300, 1593, 429, 1437, 280, 440, 1738, 20639, 62,
        14118, 1, 1534, 330, 274, 3869, 13, 1273, 254, 6405, 317, 441, 1503, 410,
        745, 418, 642, 5023, 276, 7804, 11, 4283, 254, 3869, 7137, 85843, 633, 185,
        391, 16966, 85176, 8073, 254, 2198, 3744, 280, 19515, 5023, 327, 254, 6405,
        317, 7116, 1090, 440, 27809, 280, 19515, 5023, 2859, 7915, 19515, 2861, 11,
        1236, 565, 745, 317, 889, 634, 11, 1534, 330, 697, 280, 254, 440, 1738, 20639,
        62, 14118, 1, 3869, 13, 185, 185, 12, 22089, 4327, 25, 185, 300, 1593, 1273,
        245, 3052, 4327, 317, 4286, 327, 245, 6405, 1090, 440, 30283, 4327, 1084,
        340, 1534, 1181, 344, 4327, 327, 521, 19515, 5023, 5939, 276, 344, 6405, 13,
        185, 300, 1593, 1273, 245, 13979, 5760, 317, 4286, 327, 245, 6405, 1090, 440,
        48945, 5760, 1084, 254, 19515, 2861, 1437, 1534, 330, 2383, 344, 5760, 13,
        185, 300, 1593, 1273, 2324, 13809, 418, 4286, 327, 245, 6405, 1090, 440, 23865,
        13809, 1084, 254, 19515, 2861, 1437, 1534, 330, 245, 1525, 8891, 889, 13809,
        473, 254, 56925, 845, 13, 1273, 5249, 280, 254, 56925, 13809, 4359, 11, 536,
        441, 7804, 688, 5023, 327, 344, 6405, 13, 185, 300, 1593, 1273, 745, 418,
        2203, 5023, 8462, 6499, 20639, 6405, 6987, 8467, 1682, 276, 1181, 254, 1246,
        3398, 285, 33900, 327, 520, 19515, 5023, 13, 185, 300, 1593, 2473, 46277,
        2662, 3039, 11, 15255, 768, 279, 3517, 565, 254, 3632, 4706, 280, 254, 3412,
        317, 441, 3517, 13, 185, 185, 12, 39799, 280, 19515, 5023, 25, 185, 300, 1593,
        7915, 6405, 30405, 274, 440, 1738, 20639, 2861, 1449, 1, 334, 10232, 1090,
        440, 43170, 19515, 2861, 1449, 6419, 37006, 520, 19515, 5023, 16660, 4174,
        344, 1449, 13, 12974, 5009, 418, 4286, 334, 68, 13, 70, 1797, 1406, 327, 2662,
        11, 1098, 327, 10858, 11, 9469, 327, 17864, 12, 3784, 1604, 11, 12998, 327,
        2159, 11, 3387, 13655, 185, 300, 1593, 3132, 441, 10791, 688, 4155, 5633,
        410, 13169, 254, 7116, 4327, 13, 185, 185, 12, 79018, 7085, 410, 4606, 5023,
        25, 185, 300, 1593, 1273, 245, 6405, 317, 441, 6346, 430, 521, 11, 520, 2827,
        1023, 1592, 3780, 274, 6054, 327, 344, 6405, 366, 274, 7137, 440, 1738, 20639,
        62, 14118, 1, 3869, 13, 185, 300, 1593, 1494, 16982, 344, 463, 274, 440, 23865,
        13809, 3946, 3896, 25, 565, 5249, 280, 254, 56925, 13809, 4359, 276, 254,
        3093, 11, 4283, 254, 440, 1738, 20639, 62, 14118, 1, 3869, 7137, 13, 185,
        300, 1593, 1494, 16982, 344, 463, 274, 440, 23865, 13809, 3946, 3896, 25,
        565, 4606, 13809, 4359, 276, 254, 1246, 3940, 410, 3733, 11, 3433, 768, 521,
        279, 245, 2816, 19515, 2861, 366, 4606, 13809, 279, 254, 440, 31341, 1, 3869,
        334, 68, 13, 70, 1797, 19408, 31341, 2850, 17131, 1208, 16, 955, 440, 1208,
        17, 7290, 5276, 9315, 2606, 4606, 19515, 5023, 565, 745, 418, 38969, 8492,
        11705, 410, 26250, 344, 14524, 7039, 13854, 13, 185, 300, 1593, 1494, 16982,
        344, 536, 441, 463, 274, 440, 23865, 13809, 3946, 3896, 25, 565, 4606, 5023,
        418, 1503, 327, 245, 6405, 11, 3433, 1319, 372, 245, 7039, 6054, 2383, 254,
        440, 1738, 20639, 62, 14118, 1, 3869, 13, 185, 185, 12, 2366, 4585, 2432,
        25, 185, 300, 1593, 3132, 441, 3433, 688, 18209, 11, 31193, 11, 410, 2432,
        4881, 280, 254, 11573, 3869, 13, 185, 300, 1593, 3132, 441, 12475, 520, 11573,
        4400, 279, 1062, 86445, 410, 688, 750, 33900, 7445, 13, 185, 185, 17098, 185,
        1945, 20830, 1009, 91050, 334, 44, 7555, 1397, 17254, 1780, 185, 58, 185,
        300, 509, 185, 391, 440, 43109, 62, 305, 2850, 1406, 11, 185, 391, 440, 1738,
        20639, 62, 14118, 25, 825, 185, 595, 3564, 185, 391, 17827, 185, 300, 4647,
        185, 300, 3564, 185, 60, 185, 17098, 185, 185, 4062, 1442, 185, 6512, 4415,
        57470, 25, 185, 4885, 4885, 185, 12, 40834, 4993, 25, 339, 15, 185, 43170,
        1210, 25, 23899, 3758, 185, 185, 43170, 6411, 25, 185, 549, 3758, 280, 254,
        5461, 13, 185, 185, 27809, 280, 19515, 5023, 25, 1002, 6405, 975, 463, 5858,
        11, 634, 11, 410, 4606, 19515, 5023, 13, 185, 185, 43170, 19515, 2861, 1449,
        25, 1406, 185, 4885, 4885, 185, 185, 4062, 1442, 185, 185, 37513, 185, 97738,
        42470, 25, 185, 549, 3758, 280, 437, 5461, 317, 13679, 12, 5993, 15752, 25611,
        13, 185, 37513, 185, 185, 185, 185, 185, 77398, 25, 825, 185, 300, 509, 185,
        391, 440, 43109, 62, 305, 2850, 440, 34, 15, 955, 185, 391, 440, 1738, 20639,
        62, 14118, 2850, 17131, 12333, 12, 5993, 15752, 25611, 7290, 185, 300, 615,
        185, 60], "total_duration": 13359075500, "load_duration": 12503308700, "prompt_eval_count":
        1700, "prompt_eval_duration": 591301700, "eval_count": 36, "eval_duration":
        262299800}'
    headers:
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - DUMMY
      Transfer-Encoding:
      - chunked
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "deepseek-r1:32b", "prompt": "### System:\nYou will be assigned
      tasks involving the extraction, analysis, and interpretation of data within
      various types of documents. Your role is to carefully process the information
      and provide accurate, relevant outputs based on the specific instructions provided.\n\nKEY
      TERMINOLOGY TO UNDERSTAND:\n\n1. Document: A structured or unstructured file
      containing written or visual content. Documents can vary in type and purpose,
      including but not limited to:\n- Contracts: Legal agreements defining terms
      and obligations.\n- Invoices: Financial documents detailing transactions and
      payments.\n- Curricula Vitae (CVs): Resumes outlining an individual''s professional
      experience and qualifications.\n- General Documents: Any other types of files
      that may contain text, tables, images, or mixed formats.\nNote that occasionally
      you may be working with document fragments rather than complete documents. These
      fragments represent portions of a larger document and should be analyzed within
      their limited context. When working with fragments, focus on extracting information
      from the available content without making assumptions about missing parts.\n\n2.
      Aspect: A defined area or topic within a document that requires focused attention.
      Each aspect corresponds to a specific subject or theme described in the task.
      For example:\n- Contract Aspects: Payment terms, parties involved, or termination
      clauses.\n- Invoice Aspects: Due dates, line-item breakdowns, or tax details.\n-
      CV Aspects: Work experience, education, or skills.\nYou will analyze aspects
      as instructed, considering their relevance and context within the document.\n\n3.
      Concept: A unit of information or an entity relevant to the task. Concepts may
      be derived from an aspect or the broader document context. They represent a
      wide range of data points and insights, from simple entities (names, dates,
      monetary values) to complex evaluations, conclusions, and answers to specific
      questions. Concepts can be:\n- Factual extractions: Such as a penalty clause
      in a contract, a total amount due in an invoice, or a certification in a CV.\n-
      Analytical insights: Such as risk assessments, compliance evaluations, or pattern
      identifications.\n- Reasoned conclusions: Such as determining whether a document
      meets specific criteria or answers particular questions.\n- Interpretative judgments:
      Such as ratings, classifications, or qualitative assessments based on document
      content.\n\nGUIDELINES FOR YOUR WORK:\n- Understand the context: Before processing
      the document, ensure you comprehend the nature of the document and the aspects
      or concepts you need to focus on.\n- Follow specific instructions: Each task
      will include detailed instructions, such as which aspects or concepts to focus
      on and how the data should be presented.\n- Maintain accuracy: Provide precise
      extractions and analysis, ensuring your outputs align with the document''s intent
      and context.\n- Adapt to variability: Documents may differ in structure, language,
      or formatting. Be flexible and apply reasoning to handle variations effectively.\n\nEXPECTED
      DELIVERABLES:\n- Structured outputs: Clearly formatted and well-organized results
      based on the task requirements.\n- Explanations (when required): When required
      by the instructions, include justifications or reasoning for your interpretations.\n-
      Insights (when required): When required by the instructions, highlight trends,
      patterns, or noteworthy findings that could add value to the task.\n- References
      (when required): When required by the instructions, output references based
      on which you extracted data, provided insights, or made conclusions during the
      task.\n\n\nBy adhering to this framework, you will ensure consistent and high-quality
      performance across diverse document analysis tasks.\n\n### User:\nBelow you
      will find document text and a list of concepts.\n\nYour task is to:\n1. Read
      through the document text provided.\n2. Identify whether each concept in the
      concepts list is addressed within the document text.\n3. For each concept that
      appears, extract zero or more items relevant to that concept. The item format
      and structure are specified for each concept.\n4. Produce a JSON array containing
      your extracted data, in the provided format.\n\nIf a concept is not addressed
      in the document text, you must still include an entry in the final JSON output
      but with an empty \"extracted_items\" list.\n\nFollow these additional rules:\n\n-
      Output format:\nProvide your answer in only the following answer format (do
      not include backticks, code fences, or any introductory/explanatory text).\n\n-
      Consistency:\n    -- Each JSON object in the list must have two keys: \"concept_id\"
      and \"extracted_items\".\n    -- The value of \"concept_id\" must match exactly
      the ID of the concept (for example, \"C0\", \"C1\", etc.).\n    -- The value
      of \"extracted_items\" must be an array. If the concept is not found or there
      are no items to extract, leave the array empty ([]).\n        --- Guidance regarding
      the possible amount of extracted items for the concept is specified under \"Amount
      of extracted items\". Each extracted item, even if there is only one, must be
      part of the \"extracted_items\" array.\n\n- Item structure:\n    -- If a specific
      structure is provided for a concept under \"Expected structure,\" you must follow
      that structure for all extracted items corresponding to that concept.\n    --
      If a rating scale is provided for a concept under \"Rating scale,\" the extracted
      item value must be within that scale.\n    -- If available labels are provided
      for a concept under \"Available labels,\" the extracted item value must be a
      list containing only labels from the predefined set. If none of the predefined
      labels apply, do not extract any items for that concept.\n    -- If there are
      example items (\"Extracted concept examples\"), try to follow the same style
      and formatting for your extracted items.\n    -- When extracting string values,
      translate them in English if the original language of the document is not English.\n\n-
      Types of extracted items:\n    -- Each concept specifies an \"extracted item
      type\" (found under \"Concept extracted item type\"). Ensure your extracted
      items strictly match that type. Python types are provided (e.g., str for string,
      int for integer, float for floating-point number, dict for object, etc.).\n    --
      Do not introduce any extra fields or modify the specified structure.\n\n- Handling
      missing or multiple items:\n    -- If a concept is not mentioned at all, your
      output should still contain an entry for that concept with an empty \"extracted_items\"
      array.\n    -- For concepts that have an \"Available labels:\" section: if none
      of the predefined labels apply to the content, leave the \"extracted_items\"
      array empty.\n    -- For concepts that have an \"Available labels:\" section:
      if multiple labels apply to the same instance or context, include them all in
      a single extracted item with multiple labels in the \"labels\" array (e.g.,
      {\"labels\": [\"label1\", \"label2\"]}). Only create multiple extracted items
      if there are genuinely distinct instances or contexts that warrant separate
      classification.\n    -- For concepts that do not have an \"Available labels:\"
      section: if multiple items are found for a concept, include each as a separate
      entry within the \"extracted_items\" array.\n\n- No additional text:\n    --
      Do not include any headers, explanations, or text outside of the JSON array.\n    --
      Do not wrap your JSON response in backticks or any other formatting characters.\n\n======\nANSWER
      FORMAT (MANDATORY):\n[\n    {\n        \"concept_id\": str,\n        \"extracted_items:
      [\n            ...\n        ],\n    },\n    ...\n]\n======\n\n______\nCONCEPTS:\n````\n-
      Concept ID: C0\nConcept name: Contract title\n\nConcept description:\nThe title
      of the contract.\n\nAmount of extracted items: This concept may have zero, one,
      or multiple extracted items.\n\nConcept extracted item type: str\n````\n\n______\n\n------\nDOCUMENT
      TEXT:\nThe title of this contract is Non-Disclosure Agreement.\n------\n\n\n",
      "options": {"temperature": 0.3, "top_p": 0.3, "num_predict": 4096, "seed": 123},
      "stream": false, "images": []}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '8241'
      host:
      - DUMMY
      user-agent:
      - litellm/1.71.1
    method: POST
    uri: http://localhost:11434/api/generate
  response:
    body:
      string: '{"model": "deepseek-r1:32b", "created_at": "2025-06-17T15:24:45.6578203Z",
        "response": "<think>\nAlright, I need to process the user''s query. They provided
        a document text and a list of concepts. My task is to extract relevant information
        based on these concepts.\n\nFirst, looking at the document text: \"The title
        of this contract is Non-Disclosure Agreement.\" The key piece here is the
        title mentioned after the phrase \"is\".\n\nNext, I check the concept details.
        Concept C0 is about the Contract title, expecting a string type and possibly
        multiple items. Since the document clearly states the title as \"Non-Disclosure
        Agreement\", that''s the item to extract.\n\nI need to structure this into
        JSON format with \"concept_id\" as \"C0\" and include the extracted title
        in an array under \"extracted_items\". Even though there''s only one item,
        it should be within an array as per instructions.\n\nI also ensure that I
        don''t add any extra text or formatting beyond what''s required. The output
        must strictly follow the specified JSON structure without any explanations
        or markdown.\n</think>\n\n[\n    {\n        \"concept_id\": \"C0\",\n        \"extracted_items\":
        [\"Non-Disclosure Agreement\"]\n    }\n]", "done": true, "done_reason": "stop",
        "context": [151644, 14374, 739, 510, 2610, 686, 387, 12607, 9079, 15860, 279,
        32189, 11, 6358, 11, 323, 22845, 315, 821, 2878, 5257, 4494, 315, 9293, 13,
        4615, 3476, 374, 311, 15516, 1882, 279, 1995, 323, 3410, 13382, 11, 9760,
        16275, 3118, 389, 279, 3151, 11221, 3897, 382, 4784, 93760, 46, 51432, 5146,
        56218, 784, 3976, 1447, 16, 13, 11789, 25, 362, 32930, 476, 650, 51143, 1034,
        8482, 5326, 476, 9124, 2213, 13, 44790, 646, 13289, 304, 943, 323, 7428, 11,
        2670, 714, 537, 7199, 311, 510, 12, 70559, 25, 24678, 19473, 26312, 3793,
        323, 29155, 624, 12, 758, 40683, 25, 17503, 9293, 44193, 14131, 323, 14173,
        624, 12, 12886, 45482, 28460, 5918, 320, 19589, 82, 1648, 1800, 18618, 78674,
        458, 3842, 594, 6584, 3139, 323, 42684, 624, 12, 3251, 44790, 25, 5765, 1008,
        4494, 315, 3542, 429, 1231, 6644, 1467, 11, 12632, 11, 5335, 11, 476, 9519,
        19856, 624, 9112, 429, 22930, 498, 1231, 387, 3238, 448, 2197, 34503, 4751,
        1091, 4583, 9293, 13, 4220, 34503, 4009, 19325, 315, 264, 8131, 2197, 323,
        1265, 387, 29139, 2878, 862, 7199, 2266, 13, 3197, 3238, 448, 34503, 11, 5244,
        389, 59408, 1995, 504, 279, 2500, 2213, 2041, 3259, 31846, 911, 7402, 5479,
        382, 17, 13, 80053, 25, 362, 4512, 3082, 476, 8544, 2878, 264, 2197, 429,
        7460, 10735, 6529, 13, 8886, 12893, 33210, 311, 264, 3151, 3832, 476, 6912,
        7481, 304, 279, 3383, 13, 1752, 3110, 510, 12, 19185, 1634, 7973, 25, 20453,
        3793, 11, 9677, 6398, 11, 476, 34408, 49098, 624, 12, 40190, 1634, 7973, 25,
        23662, 12713, 11, 1555, 6404, 29985, 82, 11, 476, 3742, 3565, 624, 12, 14165,
        1634, 7973, 25, 5547, 3139, 11, 6731, 11, 476, 7361, 624, 2610, 686, 23643,
        13566, 438, 40975, 11, 12831, 862, 40861, 323, 2266, 2878, 279, 2197, 382,
        18, 13, 34355, 25, 362, 4982, 315, 1995, 476, 458, 5387, 9760, 311, 279, 3383,
        13, 75772, 1231, 387, 14257, 504, 458, 12893, 476, 279, 26829, 2197, 2266,
        13, 2379, 4009, 264, 6884, 2088, 315, 821, 3501, 323, 25709, 11, 504, 4285,
        14744, 320, 11400, 11, 12713, 11, 32284, 2750, 8, 311, 6351, 55081, 11, 30242,
        11, 323, 11253, 311, 3151, 4755, 13, 75772, 646, 387, 510, 12, 434, 11944,
        11482, 4020, 25, 15132, 438, 264, 16346, 21647, 304, 264, 5116, 11, 264, 2790,
        3311, 4152, 304, 458, 24615, 11, 476, 264, 27606, 304, 264, 14165, 624, 12,
        37427, 34658, 25709, 25, 15132, 438, 5214, 40200, 11, 8733, 55081, 11, 476,
        5383, 3524, 7029, 624, 12, 26759, 291, 30242, 25, 15132, 438, 25597, 3425,
        264, 2197, 20027, 3151, 12890, 476, 11253, 3953, 4755, 624, 12, 72077, 1388,
        58258, 25, 15132, 438, 18102, 11, 95671, 11, 476, 61029, 40200, 3118, 389,
        2197, 2213, 382, 41778, 2749, 33608, 4613, 20922, 31804, 510, 12, 70894, 279,
        2266, 25, 13235, 8692, 279, 2197, 11, 5978, 498, 57289, 279, 6993, 315, 279,
        2197, 323, 279, 13566, 476, 18940, 498, 1184, 311, 5244, 389, 624, 12, 11112,
        3151, 11221, 25, 8886, 3383, 686, 2924, 11682, 11221, 11, 1741, 438, 892,
        13566, 476, 18940, 311, 5244, 389, 323, 1246, 279, 821, 1265, 387, 10449,
        624, 12, 86377, 13403, 25, 39565, 23560, 11482, 4020, 323, 6358, 11, 22573,
        697, 16275, 5285, 448, 279, 2197, 594, 7385, 323, 2266, 624, 12, 58431, 311,
        53609, 25, 44790, 1231, 1745, 304, 5944, 11, 4128, 11, 476, 36566, 13, 2823,
        18776, 323, 3796, 32711, 311, 3705, 26244, 13444, 382, 80002, 23777, 18793,
        3494, 50, 510, 12, 16139, 3073, 16275, 25, 53404, 23126, 323, 1632, 12, 62216,
        3059, 3118, 389, 279, 3383, 8502, 624, 12, 1374, 10393, 804, 320, 9309, 2567,
        1648, 3197, 2567, 553, 279, 11221, 11, 2924, 1101, 7029, 476, 32711, 369,
        697, 57589, 624, 12, 72037, 320, 9309, 2567, 1648, 3197, 2567, 553, 279, 11221,
        11, 11167, 18339, 11, 12624, 11, 476, 66379, 14613, 429, 1410, 912, 897, 311,
        279, 3383, 624, 12, 44078, 320, 9309, 2567, 1648, 3197, 2567, 553, 279, 11221,
        11, 2550, 15057, 3118, 389, 892, 498, 27432, 821, 11, 3897, 25709, 11, 476,
        1865, 30242, 2337, 279, 3383, 4192, 1359, 34951, 287, 311, 419, 12626, 11,
        498, 686, 5978, 12966, 323, 1550, 22092, 5068, 3941, 16807, 2197, 6358, 9079,
        382, 14374, 2657, 510, 38214, 498, 686, 1477, 2197, 1467, 323, 264, 1140,
        315, 18940, 382, 7771, 3383, 374, 311, 510, 16, 13, 4457, 1526, 279, 2197,
        1467, 3897, 624, 17, 13, 64547, 3425, 1817, 7286, 304, 279, 18940, 1140, 374,
        20068, 2878, 279, 2197, 1467, 624, 18, 13, 1752, 1817, 7286, 429, 7952, 11,
        8649, 7168, 476, 803, 3589, 9760, 311, 429, 7286, 13, 576, 1509, 3561, 323,
        5944, 525, 5189, 369, 1817, 7286, 624, 19, 13, 86888, 264, 4718, 1334, 8482,
        697, 27432, 821, 11, 304, 279, 3897, 3561, 382, 2679, 264, 7286, 374, 537,
        20068, 304, 279, 2197, 1467, 11, 498, 1969, 2058, 2924, 458, 4343, 304, 279,
        1590, 4718, 2550, 714, 448, 458, 4287, 330, 23493, 291, 12134, 1, 1140, 382,
        12480, 1493, 5107, 5601, 1447, 12, 9258, 3561, 510, 60424, 697, 4226, 304,
        1172, 279, 2701, 4226, 3561, 320, 2982, 537, 2924, 1182, 35078, 11, 2038,
        69155, 11, 476, 894, 61369, 25815, 10393, 5269, 1467, 3593, 12, 7292, 47094,
        510, 262, 1177, 8886, 4718, 1633, 304, 279, 1140, 1969, 614, 1378, 6894, 25,
        330, 68487, 842, 1, 323, 330, 23493, 291, 12134, 22956, 262, 1177, 576, 897,
        315, 330, 68487, 842, 1, 1969, 2432, 6896, 279, 3034, 315, 279, 7286, 320,
        1958, 3110, 11, 330, 34, 15, 497, 330, 34, 16, 497, 4992, 13, 4292, 262, 1177,
        576, 897, 315, 330, 23493, 291, 12134, 1, 1969, 387, 458, 1334, 13, 1416,
        279, 7286, 374, 537, 1730, 476, 1052, 525, 902, 3589, 311, 8649, 11, 5274,
        279, 1334, 4287, 34923, 4292, 286, 12448, 81561, 8826, 279, 3204, 3311, 315,
        27432, 3589, 369, 279, 7286, 374, 5189, 1212, 330, 10093, 315, 27432, 3589,
        3263, 8886, 27432, 1509, 11, 1496, 421, 1052, 374, 1172, 825, 11, 1969, 387,
        949, 315, 279, 330, 23493, 291, 12134, 1, 1334, 382, 12, 5739, 5944, 510,
        262, 1177, 1416, 264, 3151, 5944, 374, 3897, 369, 264, 7286, 1212, 330, 18896,
        5944, 1335, 498, 1969, 1795, 429, 5944, 369, 678, 27432, 3589, 12159, 311,
        429, 7286, 624, 262, 1177, 1416, 264, 10728, 5452, 374, 3897, 369, 264, 7286,
        1212, 330, 22152, 5452, 1335, 279, 27432, 1509, 897, 1969, 387, 2878, 429,
        5452, 624, 262, 1177, 1416, 2500, 9201, 525, 3897, 369, 264, 7286, 1212, 330,
        16485, 9201, 1335, 279, 27432, 1509, 897, 1969, 387, 264, 1140, 8482, 1172,
        9201, 504, 279, 63062, 738, 13, 1416, 6857, 315, 279, 63062, 9201, 3796, 11,
        653, 537, 8649, 894, 3589, 369, 429, 7286, 624, 262, 1177, 1416, 1052, 525,
        3110, 3589, 3489, 28959, 291, 7286, 10295, 3975, 1430, 311, 1795, 279, 1852,
        1707, 323, 36566, 369, 697, 27432, 3589, 624, 262, 1177, 3197, 59408, 914,
        2750, 11, 14683, 1105, 304, 6364, 421, 279, 4024, 4128, 315, 279, 2197, 374,
        537, 6364, 382, 12, 20768, 315, 27432, 3589, 510, 262, 1177, 8886, 7286, 29102,
        458, 330, 23493, 291, 1509, 943, 1, 320, 15105, 1212, 330, 44576, 27432, 1509,
        943, 1827, 29279, 697, 27432, 3589, 25470, 2432, 429, 943, 13, 13027, 4494,
        525, 3897, 320, 68, 1302, 2572, 607, 369, 914, 11, 526, 369, 7546, 11, 2224,
        369, 19057, 16574, 1372, 11, 6451, 369, 1633, 11, 4992, 13, 4292, 262, 1177,
        3155, 537, 19131, 894, 4960, 5043, 476, 5602, 279, 5189, 5944, 382, 12, 55713,
        7402, 476, 5248, 3589, 510, 262, 1177, 1416, 264, 7286, 374, 537, 9733, 518,
        678, 11, 697, 2550, 1265, 2058, 6644, 458, 4343, 369, 429, 7286, 448, 458,
        4287, 330, 23493, 291, 12134, 1, 1334, 624, 262, 1177, 1752, 18940, 429, 614,
        458, 330, 16485, 9201, 2974, 3772, 25, 421, 6857, 315, 279, 63062, 9201, 3796,
        311, 279, 2213, 11, 5274, 279, 330, 23493, 291, 12134, 1, 1334, 4287, 624,
        262, 1177, 1752, 18940, 429, 614, 458, 330, 16485, 9201, 2974, 3772, 25, 421,
        5248, 9201, 3796, 311, 279, 1852, 2867, 476, 2266, 11, 2924, 1105, 678, 304,
        264, 3175, 27432, 1509, 448, 5248, 9201, 304, 279, 330, 16873, 1, 1334, 320,
        68, 1302, 2572, 5212, 16873, 788, 4383, 1502, 16, 497, 330, 1502, 17, 1341,
        16630, 8278, 1855, 5248, 27432, 3589, 421, 1052, 525, 35197, 12460, 13121,
        476, 37597, 429, 7091, 8651, 23850, 624, 262, 1177, 1752, 18940, 429, 653,
        537, 614, 458, 330, 16485, 9201, 2974, 3772, 25, 421, 5248, 3589, 525, 1730,
        369, 264, 7286, 11, 2924, 1817, 438, 264, 8651, 4343, 2878, 279, 330, 23493,
        291, 12134, 1, 1334, 382, 12, 2308, 5107, 1467, 510, 262, 1177, 3155, 537,
        2924, 894, 7102, 11, 40841, 11, 476, 1467, 4889, 315, 279, 4718, 1334, 624,
        262, 1177, 3155, 537, 15061, 697, 4718, 2033, 304, 1182, 35078, 476, 894,
        1008, 36566, 5766, 382, 72929, 11692, 39351, 52225, 320, 24958, 87258, 982,
        9640, 262, 341, 286, 330, 68487, 842, 788, 607, 345, 286, 330, 23493, 291,
        12134, 25, 2278, 310, 12236, 286, 3211, 262, 1153, 262, 12236, 921, 45347,
        271, 2130, 12148, 5790, 21073, 50, 510, 73594, 3989, 12, 34355, 3034, 25,
        356, 15, 198, 44576, 829, 25, 19185, 2265, 271, 44576, 4008, 510, 785, 2265,
        315, 279, 5116, 382, 10093, 315, 27432, 3589, 25, 1096, 7286, 1231, 614, 7168,
        11, 825, 11, 476, 5248, 27432, 3589, 382, 44576, 27432, 1509, 943, 25, 607,
        198, 13874, 13874, 271, 2130, 24197, 26409, 44097, 15762, 510, 785, 2265,
        315, 419, 5116, 374, 11581, 9420, 3427, 11653, 22499, 624, 16565, 1406, 151645,
        151648, 198, 71486, 11, 358, 1184, 311, 1882, 279, 1196, 594, 3239, 13, 2379,
        3897, 264, 2197, 1467, 323, 264, 1140, 315, 18940, 13, 3017, 3383, 374, 311,
        8649, 9760, 1995, 3118, 389, 1493, 18940, 382, 5338, 11, 3330, 518, 279, 2197,
        1467, 25, 330, 785, 2265, 315, 419, 5116, 374, 11581, 9420, 3427, 11653, 22499,
        1189, 576, 1376, 6573, 1588, 374, 279, 2265, 9733, 1283, 279, 17133, 330,
        285, 11436, 5847, 11, 358, 1779, 279, 7286, 3565, 13, 34355, 356, 15, 374,
        911, 279, 19185, 2265, 11, 22331, 264, 914, 943, 323, 10767, 5248, 3589, 13,
        8704, 279, 2197, 9355, 5302, 279, 2265, 438, 330, 8121, 9420, 3427, 11653,
        22499, 497, 429, 594, 279, 1509, 311, 8649, 382, 40, 1184, 311, 5944, 419,
        1119, 4718, 3561, 448, 330, 68487, 842, 1, 438, 330, 34, 15, 1, 323, 2924,
        279, 27432, 2265, 304, 458, 1334, 1212, 330, 23493, 291, 12134, 3263, 7418,
        3498, 1052, 594, 1172, 825, 1509, 11, 432, 1265, 387, 2878, 458, 1334, 438,
        817, 11221, 382, 40, 1083, 5978, 429, 358, 1513, 944, 912, 894, 4960, 1467,
        476, 36566, 7797, 1128, 594, 2567, 13, 576, 2550, 1969, 25470, 1795, 279,
        5189, 4718, 5944, 2041, 894, 40841, 476, 50494, 624, 151649, 271, 9640, 262,
        341, 286, 330, 68487, 842, 788, 330, 34, 15, 756, 286, 330, 23493, 291, 12134,
        788, 4383, 8121, 9420, 3427, 11653, 22499, 7026, 262, 456, 60], "total_duration":
        22667576800, "load_duration": 12994305400, "prompt_eval_count": 1565, "prompt_eval_duration":
        996775900, "eval_count": 233, "eval_duration": 8670488800}'
    headers:
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - DUMMY
      Transfer-Encoding:
      - chunked
    status:
      code: 200
      message: OK
- request:
    body: '{"messages":[{"role":"system","content":"You will be assigned tasks involving
      the extraction, analysis, and interpretation of data within various types of
      documents. Your role is to carefully process the information and provide accurate,
      relevant outputs based on the specific instructions provided.\n\nKEY TERMINOLOGY
      TO UNDERSTAND:\n\n1. Document: A structured or unstructured file containing
      written or visual content. Documents can vary in type and purpose, including
      but not limited to:\n- Contracts: Legal agreements defining terms and obligations.\n-
      Invoices: Financial documents detailing transactions and payments.\n- Curricula
      Vitae (CVs): Resumes outlining an individual''s professional experience and
      qualifications.\n- General Documents: Any other types of files that may contain
      text, tables, images, or mixed formats.\nNote that occasionally you may be working
      with document fragments rather than complete documents. These fragments represent
      portions of a larger document and should be analyzed within their limited context.
      When working with fragments, focus on extracting information from the available
      content without making assumptions about missing parts.\n\n2. Aspect: A defined
      area or topic within a document that requires focused attention. Each aspect
      corresponds to a specific subject or theme described in the task. For example:\n-
      Contract Aspects: Payment terms, parties involved, or termination clauses.\n-
      Invoice Aspects: Due dates, line-item breakdowns, or tax details.\n- CV Aspects:
      Work experience, education, or skills.\nYou will analyze aspects as instructed,
      considering their relevance and context within the document.\n\n3. Concept:
      A unit of information or an entity relevant to the task. Concepts may be derived
      from an aspect or the broader document context. They represent a wide range
      of data points and insights, from simple entities (names, dates, monetary values)
      to complex evaluations, conclusions, and answers to specific questions. Concepts
      can be:\n- Factual extractions: Such as a penalty clause in a contract, a total
      amount due in an invoice, or a certification in a CV.\n- Analytical insights:
      Such as risk assessments, compliance evaluations, or pattern identifications.\n-
      Reasoned conclusions: Such as determining whether a document meets specific
      criteria or answers particular questions.\n- Interpretative judgments: Such
      as ratings, classifications, or qualitative assessments based on document content.\n\nGUIDELINES
      FOR YOUR WORK:\n- Understand the context: Before processing the document, ensure
      you comprehend the nature of the document and the aspects or concepts you need
      to focus on.\n- Follow specific instructions: Each task will include detailed
      instructions, such as which aspects or concepts to focus on and how the data
      should be presented.\n- Maintain accuracy: Provide precise extractions and analysis,
      ensuring your outputs align with the document''s intent and context.\n- Adapt
      to variability: Documents may differ in structure, language, or formatting.
      Be flexible and apply reasoning to handle variations effectively.\n\nEXPECTED
      DELIVERABLES:\n- Structured outputs: Clearly formatted and well-organized results
      based on the task requirements.\n- Explanations (when required): When required
      by the instructions, include justifications or reasoning for your interpretations.\n-
      Insights (when required): When required by the instructions, highlight trends,
      patterns, or noteworthy findings that could add value to the task.\n- References
      (when required): When required by the instructions, output references based
      on which you extracted data, provided insights, or made conclusions during the
      task.\n\n\nBy adhering to this framework, you will ensure consistent and high-quality
      performance across diverse document analysis tasks."},{"role":"user","content":"Below
      you will find document text and a list of concepts.\n\nYour task is to:\n1.
      Read through the document text provided.\n2. Identify whether each concept in
      the concepts list is addressed within the document text.\n3. For each concept
      that appears, extract zero or more items relevant to that concept. The item
      format and structure are specified for each concept.\n4. Produce a JSON array
      containing your extracted data, in the provided format.\n\nIf a concept is not
      addressed in the document text, you must still include an entry in the final
      JSON output but with an empty \"extracted_items\" list.\n\nFollow these additional
      rules:\n\n- Output format:\nProvide your answer in only the following answer
      format (do not include backticks, code fences, or any introductory/explanatory
      text).\n\n- Consistency:\n    -- Each JSON object in the list must have two
      keys: \"concept_id\" and \"extracted_items\".\n    -- The value of \"concept_id\"
      must match exactly the ID of the concept (for example, \"C0\", \"C1\", etc.).\n    --
      The value of \"extracted_items\" must be an array. If the concept is not found
      or there are no items to extract, leave the array empty ([]).\n        --- Guidance
      regarding the possible amount of extracted items for the concept is specified
      under \"Amount of extracted items\". Each extracted item, even if there is only
      one, must be part of the \"extracted_items\" array.\n\n- Item structure:\n    --
      If a specific structure is provided for a concept under \"Expected structure,\"
      you must follow that structure for all extracted items corresponding to that
      concept.\n    -- If a rating scale is provided for a concept under \"Rating
      scale,\" the extracted item value must be within that scale.\n    -- If available
      labels are provided for a concept under \"Available labels,\" the extracted
      item value must be a list containing only labels from the predefined set. If
      none of the predefined labels apply, do not extract any items for that concept.\n    --
      If there are example items (\"Extracted concept examples\"), try to follow the
      same style and formatting for your extracted items.\n    -- When extracting
      string values, translate them in English if the original language of the document
      is not English.\n\n- Types of extracted items:\n    -- Each concept specifies
      an \"extracted item type\" (found under \"Concept extracted item type\"). Ensure
      your extracted items strictly match that type. Python types are provided (e.g.,
      str for string, int for integer, float for floating-point number, dict for object,
      etc.).\n    -- Do not introduce any extra fields or modify the specified structure.\n\n-
      Handling missing or multiple items:\n    -- If a concept is not mentioned at
      all, your output should still contain an entry for that concept with an empty
      \"extracted_items\" array.\n    -- For concepts that have an \"Available labels:\"
      section: if none of the predefined labels apply to the content, leave the \"extracted_items\"
      array empty.\n    -- For concepts that have an \"Available labels:\" section:
      if multiple labels apply to the same instance or context, include them all in
      a single extracted item with multiple labels in the \"labels\" array (e.g.,
      {\"labels\": [\"label1\", \"label2\"]}). Only create multiple extracted items
      if there are genuinely distinct instances or contexts that warrant separate
      classification.\n    -- For concepts that do not have an \"Available labels:\"
      section: if multiple items are found for a concept, include each as a separate
      entry within the \"extracted_items\" array.\n\n- No additional text:\n    --
      Do not include any headers, explanations, or text outside of the JSON array.\n    --
      Do not wrap your JSON response in backticks or any other formatting characters.\n\n======\nANSWER
      FORMAT (MANDATORY):\n[\n    {\n        \"concept_id\": str,\n        \"extracted_items:
      [\n            ...\n        ],\n    },\n    ...\n]\n======\n\n______\nCONCEPTS:\n````\n-
      Concept ID: C0\nConcept name: Contract title\n\nConcept description:\nThe title
      of the contract.\n\nAmount of extracted items: This concept may have zero, one,
      or multiple extracted items.\n\nConcept extracted item type: str\n````\n\n______\n\n------\nDOCUMENT
      TEXT:\nThe title of this contract is Non-Disclosure Agreement.\n------\n"}],"model":"meta-llama-3.1-8b-instruct","max_tokens":4096,"seed":123,"temperature":0.3,"top_p":0.3}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - DUMMY
      connection:
      - keep-alive
      content-length:
      - '8225'
      content-type:
      - application/json
      host:
      - DUMMY
      user-agent:
      - AsyncOpenAI/Python 1.88.0
      x-stainless-arch:
      - other:amd64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - DUMMY
      x-stainless-package-version:
      - 1.88.0
      x-stainless-raw-response:
      - 'true'
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - DUMMY
    method: POST
    uri: http://localhost:1234/v1/chat/completions
  response:
    body:
      string: '{"id": "chatcmpl-DUMMY", "object": "chat.completion", "created": 1750173890,
        "model": "meta-llama-3.1-8b-instruct", "choices": [{"index": 0, "logprobs":
        null, "finish_reason": "stop", "message": {"role": "assistant", "content":
        "[\n    {\n        \"concept_id\": \"C0\",\n        \"extracted_items\": [\n            \"Non-Disclosure
        Agreement\"\n        ]\n    }\n]"}}], "usage": {"prompt_tokens": 1590, "completion_tokens":
        32, "total_tokens": 1622}, "stats": {}, "system_fingerprint": "meta-llama-3.1-8b-instruct"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '629'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - DUMMY
      ETag:
      - W/"275-6BYRzuTj/U4UXmGOzoF+WpXw04I"
      Keep-Alive:
      - timeout=5
      X-Powered-By:
      - Express
    status:
      code: 200
      message: OK
version: 1
