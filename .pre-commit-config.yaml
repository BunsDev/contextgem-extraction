repos:

  # Commitizen hook for conventional commits
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.5.1
    hooks:
      - id: commitizen
        stages: [commit-msg]
  
  # Custom local hooks
  - repo: local
    hooks:

      # Use locally installed Ruff for linting and auto-fixing
      - id: ruff-check
        name: Ruff linting
        entry: uv run ruff check
        pass_filenames: false
        language: system
        files: '\.py$'
        stages: [pre-commit]

      # Use locally installed Ruff for formatting
      - id: ruff-format
        name: Ruff formatting
        entry: uv run ruff format
        pass_filenames: false
        language: system
        files: '\.py$'
        stages: [pre-commit]

      # uv lock check
      - id: uv-lock
        name: uv lock check
        entry: uv lock --check
        pass_filenames: false
        language: system
        stages: [pre-commit]
      
      # Update README.md from template
      - id: update-readme
        name: Update README.md
        entry: python
        args: ["-c", "import subprocess; subprocess.run(['python', 'dev/populate_project_readme.py'])"]
        language: python
        pass_filenames: false
        always_run: true
        stages: [pre-commit]

      # Build raw docs for LLM
      - id: build-raw-docs
        name: Build raw docs for LLM
        entry: python docs/build_raw_docs_for_llm.py
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit]

      # Generate example notebooks
      - id: generate-notebooks
        name: Generate example notebooks
        entry: python dev/generate_notebooks.py
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit]

      # Pyright type checking
      - id: pyright
        name: Pyright type checking
        entry: uv run pyright
        pass_filenames: false
        language: system
        files: '\.py$'
        stages: [pre-commit]

      # Bandit security check for contextgem
      - id: bandit-contextgem
        name: Bandit security check (contextgem)
        entry: uv run bandit -r contextgem
        pass_filenames: false
        language: system
        files: '\.py$'
        stages: [pre-commit]
      
      # Bandit security check for tests and dev (skip B101 - assert usage)
      - id: bandit-tests-dev
        name: Bandit security check (tests/dev)
        entry: uv run bandit -r tests dev --skip B101
        pass_filenames: false
        language: system
        files: '\.py$'
        stages: [pre-commit]

      # Deptry dependency health check
      - id: deptry
        name: Deptry dependency health check
        entry: uv run deptry .
        pass_filenames: false
        language: system
        stages: [pre-commit]
